5 EVENTS:

1. New passenger enters at stop <Stop> = state[3][i] randomly with destination <Stop'>

CONDITION: Always only one present with rate <paxArrivalRate> at random destination <Stop'> from the list of all stops <state[3]> reachable via any one route <Route> from the origin AND <Stop> <> <Stop'>
RESULT: new.Passenger(<Stop>, <Stop'>, [<Route>.number,...])
	AND <Stop>.addPassenger(<Passenger>)

2. Passenger <Passenger> boards bus <Bus> at stop <Stop> with destination <Stop'>

CONDITION: Present with rate <state[5]> only if <Bus> is at the head of the queue at stop <Stop> (<Bus>.id == <Stop>.busQueue[0].id) AND <Passenger> wants to board <Bus> (<Bus>.id.split('.')[0] in <Passenger>.state) AND <Bus> is not at capacity (<Bus>.capacity <> len(<Bus>.passengers))
RESULT: <Passenger>.changeState(<Bus>.id) AND <Bus>.addPassenger(<Passenger>) AND <Stop>.removePassenger(<Passenger>)

3. Passenger <Passenger> disembarks bus <Bus> at stop <Stop>

CONDITION: Present with rate <state[6]> only if <Bus> is at <Stop> (<Bus> in <Stop>.busQueue) AND <Passenger> in <Bus> AND <Passenger> wants to disembark (<Passenger>.destination == <Stop>.id)
RESULT: <Bus>.removePassenger(<Passenger>)

4. Bus <Bus> arrives at stop <Road>.ends = <Stop>

CONDITION: Present with rate <Road>.rate only if <Bus> is on road <Road> (<Bus>.state == <Road>)
RESULT: <Bus>.changeState(<Stop>) AND <Stop>.busQueue.append(<Bus>) 

5. Bus <Bus> leaves stop <Stop> = <Route>.starts
CONDITION: Present with rate <state[7]> only if <Bus> is at stop <Stop> AND:
--1--there are no passengers waiting to board 
-----(<Bus>.id.split(".")[0] not in passenger.state: [for passenger in -----<Stop>.passengers])
OR
--2--there are no passengers waiting to disembark:
-----(<Bus>.id not in passenger.state: [for passenger in <Bus>.passengers]
OR
--3--not 1 AND 2 AND <Bus> is at capacity len(<Bus>.passengers) == -----<Bus>.capacity
RESULT: <Stop>.busQueue.remove(<Bus>) AND <Bus>.changeState(<Route>) 